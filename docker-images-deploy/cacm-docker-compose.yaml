version: "3.8"
services:
  ###database
  bs-ms-database:
    image: mysql:8.0
    container_name: bs-ms-database
    restart: always
    ports:
      - "3307:3306"
    networks:
      - my-network
    environment:
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-proot" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - persistence-dbs:/var/lib/mysql

  ### kafka infrastructure
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - my-network
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  kafka-broker-1:
    image: obsidiandynamics/kafka
    container_name: kafka-broker-1
    networks:
      - my-network
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_HOST://localhost:19092
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-broker-2:
    image: obsidiandynamics/kafka
    container_name: kafka-broker-2
    networks:
      - my-network
    ports:
      - "9093:9093"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9093,PLAINTEXT_HOST://localhost:29092
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9093 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-broker-3:
    image: obsidiandynamics/kafka
    container_name: kafka-broker-3
    networks:
      - my-network
    ports:
      - "9094:9094"
      - "39092:39092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9094,PLAINTEXT_HOST://0.0.0.0:39092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9094,PLAINTEXT_HOST://localhost:39092
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9094 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  ### schema registry
  schema-registry-service:
    image: confluentinc/cp-schema-registry:5.4.0
    hostname: schema-registry
    container_name: schema-registry-service
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-service
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094
    networks:
      - my-network
    restart: always

  ### kafdrob ui
  kafdrop-ui:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop-ui
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - my-network
  ### utility services
  k8s-ingress-cacmer-ms-config-service:
    image: placidenduwayo1/k8s-ingress-cacmer-ms-config-service:1.0.0
    container_name: k8s-ingress-cacmer-ms-config-service
    build:
      context: ../cacmer-utils-ms-modules/k8s-ingress-cacmer-ms-config-service
      dockerfile: Dockerfile
    ports:
      - "80:8480"
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://k8s-ingress-cacmer-ms-config-service:8480"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - my-network
    restart: on-failure

  k8s-ingress-cacmer-gateway-service:
    image: placidenduwayo1/k8s-ingress-cacmer-gateway-service:1.0.0
    container_name: k8s-ingress-cacmer-gateway-service
    build:
      context: ../cacmer-utils-ms-modules/k8s-ingress-cacmer-gateway-service
      dockerfile: Dockerfile
    ports:
      - "81:8481"
    depends_on:
      k8s-ingress-cacmer-ms-config-service:
        condition: service_healthy
    networks:
      - my-network
    restart: on-failure

  ### business microservices
  k8s-ingress-kafka-avro-cacmer-bs-ms-address:
    image: placidenduwayo1/k8s-ingress-kafka-avro-cacmer-bs-ms-address:1.0.0
    container_name: k8s-ingress-kafka-avro-cacmer-bs-ms-address
    build:
      context: ../cacmer-bs-ms-modules/k8s-ingress-kafka-avro-clean-archi-cacmer-bs-ms-address
      dockerfile: Dockerfile
    ports:
      - "8881:8881"
    depends_on:
      k8s-ingress-cacmer-ms-config-service:
        condition: service_healthy
      bs-ms-database:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
        - my-network
    restart: on-failure
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094

  k8s-ingress-kafka-avro-cacmer-bs-ms-customer:
    image: placidenduwayo1/k8s-ingress-kafka-avro-cacmer-bs-ms-customer:1.0.0
    container_name: k8s-ingress-kafka-avro-cacmer-bs-ms-customer
    build:
      context: ../cacmer-bs-ms-modules/k8s-ingress-kafka-avro-clean-archi-cacmer-bs-ms-customer
      dockerfile: Dockerfile
    ports:
      - "8882:8882"
    depends_on:
      k8s-ingress-cacmer-ms-config-service:
        condition: service_healthy
      bs-ms-database:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - my-network
    restart: on-failure
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094

  k8s-ingress-kafka-avro-cacmer-bs-ms-account:
    container_name: k8s-ingress-kafka-avro-cacmer-bs-ms-account
    image: placidenduwayo1/k8s-ingress-kafka-avro-cacmer-bs-ms-account:1.0.0
    build:
      context: ../cacmer-bs-ms-modules/k8s-ingress-kafka-avro-clean-archi-cacmer-bs-ms-account
      dockerfile: Dockerfile
    ports:
      - "8883:8883"
    networks:
      - my-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094
    depends_on:
      k8s-ingress-cacmer-ms-config-service:
        condition: service_healthy
      bs-ms-database:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    restart: on-failure

networks:
  my-network:
volumes:
  persistence-dbs: